Question 1
    - ps -e is to see every process on the system
    - ps -l is to see threads, possibly with LWP and NLWP columns.

Question 2
moshiur@moshiur-virtual-machine:~$ ps -e | grep firefox
   4775 ?        00:01:26 firefox
moshiur@moshiur-virtual-machine:~$ ps -el | grep firefox
4 R  1000    4775    1274 50  80   0 - 1113059 -    ?        00:01:29 firefox
moshiur@moshiur-virtual-machine:~$ kill -15 4775

Question 3
Twice because the parent and child process after the code lines following fork() system call must be reached before the program exits or returns execution.

Question 4
Comparing the output between the fork.c while it's running and after finished running, the following difference was noticed in the while running output:
        ├─systemd─┬─(sd-pam)
        │         ├─at-spi2-registr───2*[{at-spi2-registr}]
        │         ├─chrome_crashpad───2*[{chrome_crashpad}]
        │         ├─code─┬─code───code───7*[{code}]
        │         │      ├─code
        │         │      ├─code───4*[{code}]
        │         │      ├─code───14*[{code}]
        │         │      ├─code─┬─code─┬─bash
        │         │      │      │      ├─bash───fork───fork

pstree shows running processes as a tree.  The tree is rooted at either pid or init if pid is omitted.  
If a user name is specified, all process trees rooted at processes owned by that user are shown.
